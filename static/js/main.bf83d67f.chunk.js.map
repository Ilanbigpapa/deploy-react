{"version":3,"sources":["components/mapGrid.jsx","App.js","serviceWorker.js","index.js"],"names":["MapGrid","this","props","columns","rows","className","style","gridTemplateColumns","repeat","grid","flatMap","row","map","item","getItemStyle","value","colors","color","length","backgroundColor","Component","App","state","dimensions","phase","handleChange","bind","handleSubmit","handleSolve","handleRestart","event","target","name","setState","islands","clonedGrid","index","i","j","BFS","queue","horizontalStep","verticalStep","startPoint","x","y","push","current","shift","console","log","k","isSafe","preventDefault","arr","split","parseInt","Array","from","Math","round","random","gridObject","onClick","onSubmit","htmlFor","required","type","placeholder","pattern","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf83d67f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass MapGrid extends Component {\r\n  render() {\r\n    const { rows, columns } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <div\r\n          className=\"grid-container\"\r\n          style={{ gridTemplateColumns: \"auto \".repeat(columns) }}\r\n        >\r\n          {this.props.grid.flatMap(row =>\r\n            row.map(item => (\r\n              <div className=\"grid-item\" style={this.getItemStyle(item)}></div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getItemStyle(value) {\r\n    const colors = [\r\n      \"AntiqueWhite\",\r\n      \"Aqua\",\r\n      \"Aquamarine\",\r\n      \"Blue\",\r\n      \"Brown\",\r\n      \"CadetBlue\",\r\n      \"DarkCyan\"\r\n    ];\r\n    let color = \"white\";\r\n    if (value === 1) {\r\n      color = \"black\";\r\n    } else if (value > 1) {\r\n      color = colors[value % colors.length];\r\n    }\r\n\r\n    return { backgroundColor: color };\r\n  }\r\n}\r\n\r\nexport default MapGrid;\r\n","import React, { Component } from \"react\";\nimport MapGrid from \"./components/mapGrid\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { dimensions: \"\", rows: 0, columns: 0, phase: 0 };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSolve = this.handleSolve.bind(this);\n    this.handleRestart = this.handleRestart.bind(this);\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleRestart() {\n    const restartGridObject = {\n      rows: 0,\n      columns: 0,\n      grid: [],\n      phase: 0,\n      islands: 0\n    };\n    this.setState(restartGridObject);\n  }\n  handleSolve() {\n    const { rows, columns, grid } = this.state;\n    let clonedGrid = grid.map(row => [...row]);\n    let index = 1;\n    for (let i = 0; i < clonedGrid.length; i++) {\n      for (let j = 0; j < clonedGrid[i].length; j++) {\n        if (clonedGrid[i][j] === 1) {\n          index++;\n          clonedGrid[i][j] = index;\n          this.BFS(i, j, index, clonedGrid);\n        }\n      }\n    }\n    this.setState({ grid: clonedGrid, phase: 2, islands: index - 1 });\n  }\n\n  BFS(i, j, index, grid) {\n    let queue = [];\n    const horizontalStep = [-1, -1, -1, 0, 1, 0, 1, 1];\n    const verticalStep = [-1, 1, 0, -1, -1, 1, 0, 1];\n    let startPoint = { x: i, y: j };\n    queue.push(startPoint);\n    while (queue.length > 0) {\n      let current = queue.shift();\n      console.log(current);\n      for (let k = 0; k < horizontalStep.length; k++) {\n        if (\n          this.isSafe(\n            current.x + horizontalStep[k],\n            current.y + verticalStep[k],\n            grid\n          )\n        ) {\n          grid[current.x + horizontalStep[k]][\n            current.y + verticalStep[k]\n          ] = index;\n          queue.push({\n            x: current.x + horizontalStep[k],\n            y: current.y + verticalStep[k]\n          });\n        }\n      }\n    }\n  }\n\n  isSafe(x, y, grid) {\n    return (\n      x >= 0 &&\n      x < grid.length &&\n      y >= 0 &&\n      y < grid[x].length &&\n      grid[x][y] === 1\n    );\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    const arr = this.state.dimensions.split(\",\");\n    const rows = parseInt(arr[0]);\n    const columns = parseInt(arr[1]);\n\n    let grid = [];\n    for (let i = 0; i < rows; i++) {\n      grid[i] = Array.from({ length: columns }, () =>\n        Math.round(Math.random())\n      );\n    }\n\n    let gridObject = {\n      rows,\n      columns,\n      grid,\n      phase: 1\n    };\n    this.setState(gridObject);\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.phase === 1 && (\n          <button className=\"btn btn-primary m-2\" onClick={this.handleSolve}>\n            Solve\n          </button>\n        )}\n        {this.state.phase === 2 && (\n          <div>\n            <button\n              className=\"btn btn-primary m-2\"\n              onClick={this.handleRestart}\n            >\n              Restart\n            </button>\n            <p> number off islands: {this.state.islands} </p>\n          </div>\n        )}\n        {this.state.phase === 0 && (\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"form-group\">\n              <label htmlFor=\"dimensions\">Please enter bitmap size</label>\n              <input\n                required\n                type=\"text\"\n                className=\"form-control\"\n                value={this.state.dimensions}\n                name=\"dimensions\"\n                placeholder=\"Bitmap size:n,m\"\n                pattern=\"+[1..9]*[0..9],+[1..9]*[0..9]\"\n                onChange={this.handleChange}\n              ></input>\n              <input\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                value=\"Randomize\"\n              ></input>\n            </div>\n          </form>\n        )}\n        {this.state.phase !== 0 && (\n          <MapGrid\n            rows={this.state.rows}\n            columns={this.state.columns}\n            grid={this.state.grid}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n\nReactDOM.render(\n  //<MapGrid rows={50} columns={50} />,\n  <App />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}